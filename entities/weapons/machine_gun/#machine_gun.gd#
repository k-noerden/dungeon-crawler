extends Weapon

	super()
extends Node2D

var state = Global.WeaponState.GROUNDED
var target = Vector2.ZERO
var damage_layer
@onready var trigger = %WeaponTriggerComponent

const Bullet = preload("res://entities/attacks/bullet/bullet.tscn")
@onready var held = $Held
@onready var grounded = $Grounded

func _physics_process(delta: float) -> void:
	if state == Global.WeaponState.HELD:
		held.look_at(target)
		if held.global_rotation < -PI / 2.0 or held.global_rotation > PI / 2.0:
			%Sprite2D.flip_v = true
		else:
			%Sprite2D.flip_v = false

func fire():
	var damage = get_meta("DamageComponent").make_damage()
	var bullet = Bullet.instantiate()
	bullet.damage = damage
	bullet.set_collision_mask_value(damage_layer, true)
	bullet.global_position = %FirePoint.global_position
	bullet.global_rotation = %FirePoint.global_rotation
	Global.ephemeral.add_child(bullet)


func interact(who: Node2D) -> bool:
	who.get_meta("inventory").pickup_weapon(self)
	return true

func pickup(holder: Node2D) -> void:
	state = Global.WeaponState.HELD
	position = Vector2.ZERO
	grounded.get_node("Area2D/CollisionShape2D").set_deferred("disabled", true)
	grounded.hide()
	held.show()
	damage_layer = holder.damage_layer

func drop(holder: Node2D) -> void:
	state = Global.WeaponState.GROUNDED
	grounded.get_node("Area2D/CollisionShape2D").set_deferred("disabled", false)
	held.hide()
	grounded.show()

func equip() -> void:
	pass

func unequip() -> void:
	pass
